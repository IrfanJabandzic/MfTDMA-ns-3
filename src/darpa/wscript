# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

# def options(opt):
#     pass

# def configure(conf):
#     conf.check_nonfatal(header_name='stdint.h', define_name='HAVE_STDINT_H')

def build(bld):
    module = bld.create_ns3_module('darpa', ['core'])
    module.source = [
        'model/darpa-wireless-channel.cc',
        'model/mftdma-controller.cc',
        'model/mftdma-mac.cc',
        'model/mftdma-mac-net-device.cc',
	'model/mftdma-header.cc',
        'model/acknowledgment.cc',
        'model/tdma_slot.cc',
        'model/tdma_queue.cc',
        'model/helpers.cc',
        'model/neighbour_table.cc',
        'model/tdma_table.cc',
        'model/zmq_mac_interface.cc',
        'model/MFTDMAExternalSlotGrid.cc',
        'model/MFTDMASlotGrid.cc',
        'model/RandomSlotSelection.cc',
        'model/SlotSelectionAIModule.cc',
        'helper/mftdma-helper.cc',
        ]

    module.env.append_value('CPPPATH', '/usr/include/boost')

    module_test = bld.create_ns3_module_test_library('darpa')
    module_test.source = [
        'test/darpa-test-suite.cc',
        ]

    headers = bld(features='ns3header')
    headers.module = 'darpa'
    headers.source = [
        'model/darpa-wireless-channel.h',
        'model/mftdma-controller.h',
        'model/mftdma-mac.h',
        'model/mftdma-mac-net-device.h',
	'model/mftdma-header.h',
        'model/acknowledgment.h',
        'model/ack_moving_sample.h',
        'model/tdma_slot.h',
        'model/tdma_queue.h',
        'model/mac_types.h',
        'model/helpers.h',
        'model/neighbour_table.h',
        'model/slot_manage_protocol.h',
        'model/tdma_table.h',
        'model/zmq_mac_interface.h',
        'model/MFTDMAExternalSlotGrid.h',
        'model/MFTDMASlotGrid.h',
        'model/RandomSlotSelection.h',
        'model/SlotSelectionAIModule.h',
        'helper/mftdma-helper.h',
        ]

    if bld.env.ENABLE_EXAMPLES:
        bld.recurse('examples')

    # bld.ns3_python_bindings()

